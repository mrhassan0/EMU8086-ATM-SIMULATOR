.MODEL SMALL
 
.STACK 100H 

;WRITE MACRO 

INPUT MACRO
MOV AH,1
INT 21H
ENDM 

NEWLINE MACRO
MOV DL,10
MOV AH,2
INT 21H
MOV DL,13
MOV AH,2
INT 21H
ENDM


.DATA
PIN db 1,0,4,8,2,3,8,9
BALANCE1 dw 50000d
BALANCE2 dw 10000d 
USER  db    0d
LOCKED db   0d
COMMAND db  9d ;digit 9 bear no significance 
WELCOMEMSG    db 10,13,  "WELCOME TO SECURE TECH$"
INVALIDMSG    db 10,13, "Invalid PIN..Please Try again$" 
LOCKMSG       dw  10,13,"Your ID: **** Has been locked$" 
WELCOMEMSG2      dw  10,13,"Welcome User$"
BALANCEMSG       db  10,13,"PRESS: 1 : CHECK BALANACE$"

DEPOSITMSG   db  10,13,"PRESS: 2 : DEPOSIT MONEY$"
WITHDRAWMSG  db   10,13,"PRESS: 3 : WITHDRAW MONEY$"
TRANSACTIONMSG db 10,13,"PRESS: 4 : TRANSACTION LOG$"
LOGOUTMSG      db 10,13,"PRESS: 0 : LOGOUT$" 
KEYMSG         db 10,13, "PRESS KEY: $"
PINMSG         db 10,13, "Please Enter Your PIN: $" 
BALANCEMSG2    db 10,13, "YOUR BALANCE IS: $"
INP            db ?
VAR            db ? 
NUMBER         dw ?   
DIVISOR        dw  10000
TEN            dw  10
.CODE
MAIN PROC

;iniitialize DS

MOV AX,@DATA
MOV DS,AX
;CODE
LEA DX,WELCOMEMSG
CALL PRINT

MOV VAR,0
LSTART:
CMP VAR,3 
JGE LEND
CALL EPIN  
INC VAR 
CMP LOCKED,1
JE  LEND
JMP LSTART
LEND:
CMP LOCKED,0
JE  LOCKIE
JNE NEXTOP

LOCKIE:
LEA DX,LOCKMSG
CALL PRINT
JMP  SORRY

NEXTOP:
LEA DX,WELCOMEMSG2
CALL PRINT
LEA DX,BALANCEMSG
CALL PRINT
LEA DX,DEPOSITMSG
CALL PRINT
LEA DX,WITHDRAWMSG
CALL PRINT
LEA DX,TRANSACTIONMSG
CALL PRINT
LEA DX,LOGOUTMSG
CALL PRINT
LEA DX,KEYMSG
CALL PRINT
INPUT
SUB AL,48
CMP AL,0
JE  SORRY

CMP AL,1 
JE  BAL  ;ADD AND EDIT LOGIC FOR OPTION 2,3,4
BAL:
CMP USER,1
JE USERONE
JNE USERTWO

USERONE:  
LEA DX,BALANCEMSG2
CALL PRINT

MOV AX,BALANCE1
CALL PRINT_DIGITS
JMP NEXTOP

USERTWO:
LEA DX,BALANCEMSG2
CALL PRINT   

MOV AX,BALANCE2
CALL PRINT_DIGITS
JMP NEXTOP


SORRY:
;exit to DOS
               
MOV AX,4C00H
INT 21H

MAIN ENDP 

;WRITE PROC
EPIN PROC 
LEA DX,PINMSG
CALL PRINT ;PRINT PROC CALL
INPUT
MOV INP,AL
SUB AL,48
MOV SI,0
MOV BL,PIN[SI]
MOV SI,4
MOV BH,PIN[SI]
CMP AL,BL
JE  L2                   
CMP AL,BH
JNE L1
JE  L2
L1:
INPUT  ;INPUT MACRO CALL   ;FOR SECURITY FEATURE
INPUT     ;FIRST DIGIT WRONG
INPUT
MOV USER,0d
LEA DX,INVALIDMSG
CALL PRINT  
JMP EXIT

L2:
CALL PINCHECKER 
MOV DL,USER        ;FIRST DIGIT CORRECT
CMP DL,0h           ; DL!=0 MEANS CORRECT PIN
JNE  FORWARD
JE   MSG

MSG:
LEA DX,INVALIDMSG
CALL PRINT
JMP EXIT

FORWARD:
MOV LOCKED,1d

EXIT:  
RET    
EPIN ENDP 

PRINT PROC 
MOV AH,9
INT 21h
RET 
PRINT ENDP 

PINCHECKER PROC  
MOV BL,INP  
SUB BL,48
CMP BL,1
JE  USER1
JNE USER2

USER1:
MOV USER,1d 
MOV SI,1
JMP MAINL
USER2:
MOV USER,2d
MOV SI,5

MAINL:
MOV CL,30h 
PINLOOP:
CMP CL,33h
JGE END
INPUT
SUB AL,48
MOV BH,PIN[SI]
CMP AL,BH
JNE FAKE
JE  REAL  

FAKE: 
MOV USER,0d
CMP CL,31h
JE  ONE 
CMP CL,32h
JE  ZERO
INC CL
INPUT
ONE:          ;FOR SECURITY FEATURE
INC CL 
INPUT
ZERO:

REAL:
INC SI
INC CL 
JMP PINLOOP
END: 
RET  
PINCHECKER ENDP 

PRINT_DIGITS PROC ;DIGITS MUST BE IN AX REGISTER 
MOV CX,5 
MOV NUMBER,AX 
MOV DIVISOR,10000d         ;BEFORE CALLING : ex- MOV AX,00000d 
LOOPDIGITS:
MOV DX,0
MOV AX,NUMBER
DIV DIVISOR
MOV NUMBER,DX

MOV DX,AX
ADD DX,30H
MOV AH,2
INT 21H

MOV DX,0
MOV AX,DIVISOR
DIV TEN
MOV DIVISOR,AX

LOOP LOOPDIGITS


        
RET
PRINT_DIGITS ENDP

END MAIN
